version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - set -euxo pipefail
      - echo "Java & Maven 확인/설치"
      - (mvn -v) || (yum -y install maven || (apt-get update && apt-get -y install maven))
      - java -version || true
      - mvn -version || true

  pre_build:
    commands:
      - set -euxo pipefail
      - echo "pom.xml 위치 자동 탐색"
      - |
        # find 명령어로 pom.xml을 찾고, 그 파일이 속한 디렉토리를 PROJECT_DIR에 저장합니다.
        PROJECT_DIR="$(find . -type f -name pom.xml -not -path '*/target/*' -not -path '*/.mvn/wrapper/*' | head -n1 | xargs dirname)"
        if [ -z "${PROJECT_DIR}" ]; then
          echo "❌ pom.xml을 찾지 못했습니다."; find . -maxdepth 3 -type d -print; exit 1
        fi
        echo "✅ PROJECT_DIR=$PROJECT_DIR"
        printf 'export PROJECT_DIR=%q\n' "$PROJECT_DIR" > /tmp/build_vars.sh

  build:
    commands:
      - set -euxo pipefail
      - source /tmp/build_vars.sh
      - echo "Maven 빌드 실행 (DIR=$PROJECT_DIR)"
      - |
        # 프로젝트 디렉토리로 이동하여 빌드를 실행합니다.
        cd "$PROJECT_DIR"
      - mvn -B -DskipTests clean package
      - |
        # 빌드 후 다시 최상위 디렉토리로 돌아옵니다.
        cd "$CODEBUILD_SRC_DIR"
        # JAR 경로 계산 (sources/javadoc/original 제외)
        JAR_PATH="$(find "$PROJECT_DIR/target" -maxdepth 1 -type f -name '*.jar' \
          ! -name '*-sources.jar' ! -name '*-javadoc.jar' ! -name '*-original.jar' | head -n1)"
        if [ -z "${JAR_PATH:-}" ]; then
          echo "❌ JAR not found under $PROJECT_DIR/target"; ls -la "$PROJECT_DIR/target" || true; exit 1
        fi
        echo "✅ JAR_PATH=$JAR_PATH"
        printf 'export JAR_PATH=%q\n' "$JAR_PATH" >> /tmp/build_vars.sh

  post_build:
    commands:
      - set -euxo pipefail
      - source /tmp/build_vars.sh
      - echo "아티팩트 번들링"
      - mkdir -p artifact/app/build/libs artifact/app/public
      - cp "$JAR_PATH" artifact/app/build/libs/app.jar
      - |
        # 보조 파일 복사(있을 때만 경고 없이 진행)
        [ -f appspec.yml ] && cp appspec.yml artifact/ || echo "⚠️ appspec.yml 없음"
        [ -d scripts ] && cp -r scripts artifact/ || echo "⚠️ scripts/ 없음"
        [ -d systemd ] && cp -r systemd artifact/ || echo "⚠️ systemd/ 없음"
      - printf '{"commit":"%s","builtAt":"%s"}' "$CODEBUILD_RESOLVED_SOURCE_VERSION" "$(date -u +%FT%TZ)" > artifact/app/public/build.json
      - echo "아티팩트 내용 확인:" && find artifact -type f | sed 's/^/ - /'

artifacts:
  files:
    - appspec.yml
    - scripts/**/*
    - systemd/**/*
    - app/build/libs/app.jar
    - app/public/build.json
  base-directory: artifact