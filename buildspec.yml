version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Java와 Maven 설치 중..."
      - yum -y install maven || (apt-get update && apt-get -y install maven)
      - java -version
      - mvn -version

  pre_build:
    commands:
      - echo "빌드 전 준비 단계"
      - echo "현재 디렉토리 구조 확인:"
      - ls -la
      - echo "pom.xml 파일 찾기:"
      - find . -name "pom.xml" -type f 2>/dev/null || echo "pom.xml 파일을 찾을 수 없습니다"
      - |
        # pom.xml 위치 확인 및 프로젝트 디렉토리 설정
        if [ -f "pom.xml" ]; then
          PROJECT_DIR="."
          echo "루트 디렉토리에서 pom.xml 발견: $PROJECT_DIR"
        elif [ -f "app/pom.xml" ]; then
          PROJECT_DIR="app"
          echo "app 디렉토리에서 pom.xml 발견: $PROJECT_DIR"
        else
          echo "오류: pom.xml 파일을 찾을 수 없습니다!"
          echo "현재 디렉토리의 모든 파일:"
          find . -type f -name "*.xml" 2>/dev/null || echo "XML 파일이 없습니다"
          find . -type f -name "*.java" 2>/dev/null || echo "Java 파일이 없습니다"
          echo "전체 디렉토리 구조:"
          find . -type f | head -20
          exit 1
        fi
        # 환경 변수 저장
        echo "PROJECT_DIR=$PROJECT_DIR" > /tmp/build_vars.sh
        echo "프로젝트 디렉토리 설정 완료: $PROJECT_DIR"

  build:
    commands:
      - echo "빌드 단계 시작"
      - source /tmp/build_vars.sh
      - echo "프로젝트 디렉토리: $PROJECT_DIR"
      - export MAVEN_OPTS="-Xmx1024m"
      - |
        # pom.xml 내용 확인 (디버깅용)
        echo "=== pom.xml 내용 확인 ==="
        if [ -f "$PROJECT_DIR/pom.xml" ]; then
          cat "$PROJECT_DIR/pom.xml"
        else
          echo "오류: $PROJECT_DIR/pom.xml 파일이 없습니다!"
          exit 1
        fi
        echo "========================="
      - |
        # Maven 빌드 실행
        echo "Maven 빌드 시작..."
        cd "$PROJECT_DIR"
        mvn clean package -B -DskipTests -e
        BUILD_RESULT=$?
        
        if [ $BUILD_RESULT -ne 0 ]; then
          echo "오류: Maven 빌드가 실패했습니다 (종료 코드: $BUILD_RESULT)"
          echo "target 디렉토리 확인:"
          ls -la target/ 2>/dev/null || echo "target 디렉토리가 없습니다"
          exit $BUILD_RESULT
        fi
        
        echo "Maven 빌드 성공!"
        echo "생성된 파일 확인:"
        ls -la target/
        cd "$CODEBUILD_SRC_DIR"

  post_build:
    commands:
      - echo "빌드 후 처리 단계"
      - source /tmp/build_vars.sh
      - |
        # JAR 파일 찾기
        echo "JAR 파일 찾는 중..."
        if [ -f "$PROJECT_DIR/target"/*.jar ]; then
          JAR_FILES=($PROJECT_DIR/target/*.jar)
          JAR_PATH="${JAR_FILES[0]}"
          echo "JAR 파일 발견: $JAR_PATH"
        else
          echo "오류: JAR 파일을 찾을 수 없습니다!"
          echo "$PROJECT_DIR/target 디렉토리 내용:"
          ls -la "$PROJECT_DIR/target/" 2>/dev/null || echo "target 디렉토리가 없습니다"
          echo "전체 JAR 파일 검색:"
          find . -name "*.jar" -type f 2>/dev/null || echo "JAR 파일이 없습니다"
          exit 1
        fi
      - |
        # 아티팩트 디렉토리 구성
        echo "아티팩트 디렉토리 구성 중..."
        mkdir -p artifact/app/build/libs artifact/app/public
        
        # JAR 파일 복사
        cp "$JAR_PATH" artifact/app/build/libs/app.jar
        echo "JAR 파일 복사 완료: $JAR_PATH -> artifact/app/build/libs/app.jar"
        
        # 기타 파일들 복사 (있는 경우에만)
        if [ -f appspec.yml ]; then
          cp appspec.yml artifact/
          echo "appspec.yml 복사 완료"
        else
          echo "경고: appspec.yml 파일이 없습니다"
        fi
        
        if [ -d scripts ]; then
          cp -r scripts artifact/
          echo "scripts 디렉토리 복사 완료"
        else
          echo "경고: scripts 디렉토리가 없습니다"
        fi
        
        if [ -d systemd ]; then
          cp -r systemd artifact/
          echo "systemd 디렉토리 복사 완료"
        else
          echo "경고: systemd 디렉토리가 없습니다"
        fi
        
        # 빌드 정보 생성
        printf '{"commit":"%s","builtAt":"%s"}' "$CODEBUILD_RESOLVED_SOURCE_VERSION" "$(date -u +%FT%TZ)" > artifact/app/public/build.json
        
        echo "아티팩트 구조 확인:"
        find artifact -type f

artifacts:
  files:
    - '**/*'
  base-directory: artifact